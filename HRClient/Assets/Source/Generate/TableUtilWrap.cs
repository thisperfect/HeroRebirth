//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TableUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TableUtil), typeof(System.Object));
		L.RegFunction("OpenFromData", OpenFromData);
		L.RegFunction("OpenFromTXT", OpenFromTXT);
		L.RegFunction("OpenFromMemory", OpenFromMemory);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("GetColumn", GetColumn);
		L.RegFunction("GetRecordsNum", GetRecordsNum);
		L.RegFunction("GetFieldsNum", GetFieldsNum);
		L.RegFunction("New", _CreateTableUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTableUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TableUtil obj = new TableUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TableUtil.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.OpenFromData(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromTXT(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.OpenFromTXT(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromMemory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			bool o = obj.OpenFromMemory(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string o = obj.GetValue(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColumn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetColumn(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRecordsNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			int o = obj.GetRecordsNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFieldsNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableUtil obj = (TableUtil)ToLua.CheckObject(L, 1, typeof(TableUtil));
			int o = obj.GetFieldsNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

