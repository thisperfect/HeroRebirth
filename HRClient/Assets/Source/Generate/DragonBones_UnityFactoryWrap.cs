//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DragonBones_UnityFactoryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DragonBones.UnityFactory), typeof(DragonBones.BaseFactory));
		L.RegFunction("RemoveDragonBonesData", RemoveDragonBonesData);
		L.RegFunction("RemoveTextureAtlasData", RemoveTextureAtlasData);
		L.RegFunction("Clear", Clear);
		L.RegFunction("BuildArmatureComponent", BuildArmatureComponent);
		L.RegFunction("GetTextureDisplay", GetTextureDisplay);
		L.RegFunction("LoadDragonBonesData", LoadDragonBonesData);
		L.RegFunction("LoadTextureAtlasData", LoadTextureAtlasData);
		L.RegFunction("RefreshAllTextureAtlas", RefreshAllTextureAtlas);
		L.RegFunction("New", _CreateDragonBones_UnityFactory);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("factory", get_factory, null);
		L.RegVar("defaultShaderName", get_defaultShaderName, set_defaultShaderName);
		L.RegVar("soundEventManager", get_soundEventManager, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDragonBones_UnityFactory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DragonBones.DataParser arg0 = (DragonBones.DataParser)ToLua.CheckObject(L, 1, typeof(DragonBones.DataParser));
				DragonBones.UnityFactory obj = new DragonBones.UnityFactory(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DragonBones.UnityFactory.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveDragonBonesData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.RemoveDragonBonesData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTextureAtlasData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.RemoveTextureAtlasData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Clear(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildArmatureComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			UnityEngine.GameObject arg4 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 6, typeof(UnityEngine.GameObject));
			DragonBones.UnityArmatureComponent o = obj.BuildArmatureComponent(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureDisplay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.GameObject o = obj.GetTextureDisplay(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadDragonBonesData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(DragonBones.UnityFactory), typeof(UnityEngine.TextAsset), typeof(string), typeof(float)))
			{
				DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.ToObject(L, 1);
				UnityEngine.TextAsset arg0 = (UnityEngine.TextAsset)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				DragonBones.DragonBonesData o = obj.LoadDragonBonesData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(DragonBones.UnityFactory), typeof(string), typeof(string), typeof(float)))
			{
				DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				DragonBones.DragonBonesData o = obj.LoadDragonBonesData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.UnityFactory.LoadDragonBonesData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextureAtlasData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(DragonBones.UnityFactory), typeof(UnityEngine.TextAsset), typeof(string), typeof(float)))
			{
				DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.ToObject(L, 1);
				UnityEngine.TextAsset arg0 = (UnityEngine.TextAsset)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				DragonBones.UnityTextureAtlasData o = obj.LoadTextureAtlasData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(DragonBones.UnityFactory), typeof(string), typeof(string), typeof(float)))
			{
				DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				DragonBones.UnityTextureAtlasData o = obj.LoadTextureAtlasData(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragonBones.UnityFactory.LoadTextureAtlasData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshAllTextureAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)ToLua.CheckObject(L, 1, typeof(DragonBones.UnityFactory));
			obj.RefreshAllTextureAtlas();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_factory(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, DragonBones.UnityFactory.factory);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultShaderName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)o;
			string ret = obj.defaultShaderName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultShaderName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_soundEventManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)o;
			DragonBones.IEventDispatcher<DragonBones.EventObject> ret = obj.soundEventManager;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index soundEventManager on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultShaderName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.UnityFactory obj = (DragonBones.UnityFactory)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.defaultShaderName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultShaderName on a nil value" : e.Message);
		}
	}
}

