//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIInputFieldWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIInputField), typeof(UnityEngine.UI.InputField));
		L.RegFunction("ValueChange", ValueChange);
		L.RegFunction("ValidateInput", ValidateInput);
		L.RegFunction("EndEdit", EndEdit);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("controlID", get_controlID, set_controlID);
		L.RegVar("uiMod", get_uiMod, set_uiMod);
		L.RegVar("IsAutoClose", get_IsAutoClose, set_IsAutoClose);
		L.RegVar("IsFilterEmoji", get_IsFilterEmoji, set_IsFilterEmoji);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ValueChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIInputField obj = (UIInputField)ToLua.CheckObject(L, 1, typeof(UIInputField));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ValueChange(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ValidateInput(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIInputField obj = (UIInputField)ToLua.CheckObject(L, 1, typeof(UIInputField));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 4);
			char o = obj.ValidateInput(arg0, arg1, arg2);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndEdit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIInputField obj = (UIInputField)ToLua.CheckObject(L, 1, typeof(UIInputField));
			string arg0 = ToLua.CheckString(L, 2);
			obj.EndEdit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_controlID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			int ret = obj.controlID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index controlID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiMod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			UIMod ret = obj.uiMod;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiMod on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAutoClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			bool ret = obj.IsAutoClose;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAutoClose on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFilterEmoji(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			bool ret = obj.IsFilterEmoji;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsFilterEmoji on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_controlID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.controlID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index controlID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiMod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			UIMod arg0 = (UIMod)ToLua.CheckUnityObject(L, 2, typeof(UIMod));
			obj.uiMod = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiMod on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsAutoClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsAutoClose = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAutoClose on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsFilterEmoji(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIInputField obj = (UIInputField)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsFilterEmoji = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsFilterEmoji on a nil value" : e.Message);
		}
	}
}

