//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Camera2DWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Camera2D), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("MoveTo", MoveTo);
		L.RegFunction("TweenPosTo", TweenPosTo);
		L.RegFunction("TweenPosBy", TweenPosBy);
		L.RegFunction("TweenPosToInBound", TweenPosToInBound);
		L.RegFunction("TweenPosToInBoundAtSpeed", TweenPosToInBoundAtSpeed);
		L.RegFunction("TweenSizeTo", TweenSizeTo);
		L.RegFunction("TweenSizeBack", TweenSizeBack);
		L.RegFunction("TweenAllBack", TweenAllBack);
		L.RegFunction("TweenStop", TweenStop);
		L.RegFunction("Shake", Shake);
		L.RegFunction("Blur", Blur);
		L.RegFunction("RecoverDefalutSize", RecoverDefalutSize);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("subCamera", get_subCamera, set_subCamera);
		L.RegVar("enableTouchEffect", get_enableTouchEffect, set_enableTouchEffect);
		L.RegVar("moveDecay", get_moveDecay, set_moveDecay);
		L.RegVar("horizontalLock", get_horizontalLock, set_horizontalLock);
		L.RegVar("verticalLock", get_verticalLock, set_verticalLock);
		L.RegVar("zoomLock", get_zoomLock, set_zoomLock);
		L.RegVar("zoomInLimit", get_zoomInLimit, set_zoomInLimit);
		L.RegVar("zoomOutLimit", get_zoomOutLimit, set_zoomOutLimit);
		L.RegVar("zoomSpeed", get_zoomSpeed, set_zoomSpeed);
		L.RegVar("zoomRestrict", get_zoomRestrict, set_zoomRestrict);
		L.RegVar("zoomOffsetSpeed", get_zoomOffsetSpeed, set_zoomOffsetSpeed);
		L.RegVar("mapSize", get_mapSize, set_mapSize);
		L.RegVar("mapExpand", get_mapExpand, set_mapExpand);
		L.RegVar("defaultSize", get_defaultSize, set_defaultSize);
		L.RegVar("defaultPos", get_defaultPos, set_defaultPos);
		L.RegVar("camera", get_camera, null);
		L.RegVar("position", get_position, set_position);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MoveTo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenPosTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.TweenPosTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenPosBy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.TweenPosBy(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenPosToInBound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.TweenPosToInBound(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenPosToInBoundAtSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float o = obj.TweenPosToInBoundAtSpeed(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenSizeTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.TweenSizeTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenSizeBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			obj.TweenSizeBack();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenAllBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			obj.TweenAllBack();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TweenStop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			obj.TweenStop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Shake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.Shake(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Blur(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Blur(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecoverDefalutSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Camera2D obj = (Camera2D)ToLua.CheckObject(L, 1, typeof(Camera2D));
			obj.RecoverDefalutSize();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_subCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Camera ret = obj.subCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index subCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableTouchEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool ret = obj.enableTouchEffect;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableTouchEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_moveDecay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.moveDecay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveDecay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_horizontalLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool ret = obj.horizontalLock;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index horizontalLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verticalLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool ret = obj.verticalLock;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index verticalLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool ret = obj.zoomLock;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomInLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.zoomInLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomInLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomOutLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.zoomOutLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomOutLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.zoomSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomRestrict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.zoomRestrict;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomRestrict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomOffsetSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.zoomOffsetSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomOffsetSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mapSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector2 ret = obj.mapSize;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mapSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mapExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector4 ret = obj.mapExpand;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mapExpand on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float ret = obj.defaultSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector2 ret = obj.defaultPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Camera ret = obj.camera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index camera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector3 ret = obj.position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_subCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.subCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index subCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableTouchEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableTouchEffect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableTouchEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_moveDecay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.moveDecay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveDecay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_horizontalLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.horizontalLock = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index horizontalLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verticalLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.verticalLock = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index verticalLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.zoomLock = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomInLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.zoomInLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomInLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomOutLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.zoomOutLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomOutLimit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.zoomSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomRestrict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.zoomRestrict = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomRestrict on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomOffsetSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.zoomOffsetSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomOffsetSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mapSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.mapSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mapSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mapExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector4 arg0 = ToLua.ToVector4(L, 2);
			obj.mapExpand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mapExpand on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.defaultSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.defaultPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Camera2D obj = (Camera2D)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index position on a nil value" : e.Message);
		}
	}
}

