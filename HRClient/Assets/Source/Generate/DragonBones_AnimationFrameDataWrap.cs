//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DragonBones_AnimationFrameDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DragonBones.AnimationFrameData), typeof(DragonBones.FrameData<DragonBones.AnimationFrameData>));
		L.RegFunction("New", _CreateDragonBones_AnimationFrameData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("actions", get_actions, null);
		L.RegVar("events", get_events, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDragonBones_AnimationFrameData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DragonBones.AnimationFrameData obj = new DragonBones.AnimationFrameData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DragonBones.AnimationFrameData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_actions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.AnimationFrameData obj = (DragonBones.AnimationFrameData)o;
			System.Collections.Generic.List<DragonBones.ActionData> ret = obj.actions;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index actions on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_events(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DragonBones.AnimationFrameData obj = (DragonBones.AnimationFrameData)o;
			System.Collections.Generic.List<DragonBones.EventData> ret = obj.events;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index events on a nil value" : e.Message);
		}
	}
}

